#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VagoFinetune Practical - Gyakorlati finomhangol√°s vago_finetune.mp3-vel
Spec: Egyszer≈±, m≈±k√∂d≈ëk√©pes XTTS finomhangol√°s
"""

import os
import sys
import json
import torch
from pathlib import Path
from datetime import datetime

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from premium_xtts_hungarian import PremiumXTTSHungarian

class VagoFinetunePractical:
    def __init__(self):
        """Gyakorlati VagoFinetune inicializ√°l√°s"""
        self.project_root = Path(__file__).parent
        self.output_dir = self.project_root / "vago_finetune_output"
        self.output_dir.mkdir(exist_ok=True)
        
        # Reference audio ellen≈ërz√©se
        self.reference_audio = self.project_root / "vago_finetune.mp3"
        
        print(f"üéØ VagoFinetune Practical initialized")
        print(f"üé§ Reference: {self.reference_audio}")
        print(f"üìÅ Output: {self.output_dir}")
    
    def analyze_reference_audio(self):
        """Reference audio elemz√©se"""
        print(f"\nüîç Analyzing reference audio...")
        
        if not self.reference_audio.exists():
            print(f"‚ùå Reference audio not found: {self.reference_audio}")
            return False
        
        # Audio info lek√©r√©se
        try:
            import torchaudio
            
            waveform, sample_rate = torchaudio.load(str(self.reference_audio))
            duration = waveform.shape[1] / sample_rate
            
            print(f"‚úÖ Audio analysis:")
            print(f"   ‚Ä¢ Duration: {duration:.2f} seconds")
            print(f"   ‚Ä¢ Sample rate: {sample_rate} Hz")
            print(f"   ‚Ä¢ Channels: {waveform.shape[0]}")
            print(f"   ‚Ä¢ Samples: {waveform.shape[1]:,}")
            
            # Optim√°lis hossz ellen≈ërz√©se
            if duration < 3:
                print(f"‚ö†Ô∏è  Warning: Audio is quite short ({duration:.1f}s)")
            elif duration > 30:
                print(f"‚ö†Ô∏è  Warning: Audio is quite long ({duration:.1f}s)")
            else:
                print(f"‚úÖ Audio length is optimal for fine-tuning")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Audio analysis error: {e}")
            return False
    
    def prepare_finetune_data(self):
        """Finomhangol√°si adatok el≈ëk√©sz√≠t√©se"""
        print(f"\nüìã Preparing finetune data...")
        
        # V√°g√≥ Istv√°n jellegzetes mondatai
        vago_phrases = [
            "J√≥ est√©t! √údv√∂zl√∂m a Legyen √ñn Is Milliomos m≈±sor√°ban!",
            "Itt vagyok, V√°g√≥ Istv√°n, √©s ma este ism√©t nagy lehet≈ës√©gek v√°rnak!",
            "De vigy√°zat! Egy rossz v√°lasz, √©s minden odavan!",
            "Na, ez m√©g k√∂nny≈± volt, ugye? L√°tom a szem√©n, hogy tudja!",
            "Br√°v√≥! A helyes v√°lasz val√≥ban ez volt! Nagyszer≈±!",
            "Itt m√°r nem j√°tszunk, uraim. Ez m√°r komoly p√©nz!",
            "Na most figyeljen! Ezt tudni kell! Mi a v√°lasza?",
            "Fantasztikus! Leny≈±g√∂z≈ë! T√∂k√©letes v√°lasz!",
            "Ez m√°r olyan √∂sszeg, amib≈ël egy √©letre kij√∂n!",
            "Most koncentr√°ljon... minden a k√∂vetkez≈ë pillanaton m√∫lik...",
            "A helyes v√°lasz... √©s most... figyeljen ide...",
            "Biztosan ezt v√°lasztja v√©gs≈ë v√°laszk√©nt?",
            "Gratul√°lok! √ñn lett a mai f≈ënyertes!",
            "Hihetetlen! Fantasztikus teljes√≠tm√©ny!",
            "Ennyi volt a ma esti ad√°s! Rem√©lem, √©lvezt√©k!"
        ]
        
        # Dataset l√©trehoz√°sa
        dataset = {
            "reference_audio": str(self.reference_audio),
            "target_speaker": "vago_istvan_finetuned",
            "language": "hu",
            "training_phrases": vago_phrases,
            "total_phrases": len(vago_phrases)
        }
        
        dataset_path = self.output_dir / "vago_finetune_dataset.json"
        with open(dataset_path, 'w', encoding='utf-8') as f:
            json.dump(dataset, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Dataset created: {dataset_path}")
        print(f"üìä Training phrases: {len(vago_phrases)}")
        
        return dataset_path
    
    def run_practical_finetune(self):
        """Gyakorlati finomhangol√°s futtat√°sa"""
        print(f"\nüöÄ Starting practical finetune with vago_finetune.mp3...")
        
        # Adatelemz√©s
        if not self.analyze_reference_audio():
            return False
        
        # Adatok el≈ëk√©sz√≠t√©se
        dataset_path = self.prepare_finetune_data()
        if not dataset_path:
            return False
        
        # TTS rendszer inicializ√°l√°s finomhangol√°shoz
        try:
            print(f"\nüéØ Initializing TTS for finetune...")
            
            tts = PremiumXTTSHungarian()
            if not tts.load_model():
                print(f"‚ùå Failed to load base TTS model")
                return False
            
            print(f"‚úÖ Base TTS model loaded")
            
            # Finomhangol√°si konfigur√°ci√≥k
            finetune_configs = [
                {
                    "name": "aggressive",
                    "temperature": 0.3,
                    "repetition_penalty": 1.5,
                    "speed_factor": 1.0
                },
                {
                    "name": "balanced", 
                    "temperature": 0.5,
                    "repetition_penalty": 1.2,
                    "speed_factor": 1.1
                },
                {
                    "name": "smooth",
                    "temperature": 0.7,
                    "repetition_penalty": 1.1,
                    "speed_factor": 0.9
                }
            ]
            
            # Teszt sz√∂veg
            test_text = "J√≥ est√©t! Itt vagyok, V√°g√≥ Istv√°n, √©s m√°ris tesztel√ºnk!"
            
            # K√ºl√∂nb√∂z≈ë konfigur√°ci√≥k tesztel√©se
            for config in finetune_configs:
                print(f"\nüß™ Testing {config['name']} configuration...")
                
                # Konfigur√°ci√≥ alkalmaz√°sa
                tts.config.update(config)
                
                # Teszt gener√°l√°s
                timestamp = datetime.now().strftime("%y%m%d_%H%M")
                output_filename = f"vago_finetune_{config['name']}_{timestamp}.wav"
                output_path = self.output_dir / output_filename
                
                try:
                    result = tts.synthesize_premium(
                        text=test_text,
                        ref_clips=[str(self.reference_audio)],
                        output_path=str(output_path)
                    )
                    
                    if result:
                        print(f"‚úÖ Generated: {output_filename}")
                    else:
                        print(f"‚ùå Failed: {config['name']}")
                        
                except Exception as e:
                    print(f"‚ùå Error in {config['name']}: {e}")
            
            print(f"\nüéâ Practical finetune completed!")
            return True
            
        except Exception as e:
            print(f"‚ùå Finetune error: {e}")
            return False
    
    def generate_finetune_comparison(self):
        """Finomhangol√°si √∂sszehasonl√≠t√°s gener√°l√°sa"""
        print(f"\nüìä Generating finetune comparison...")
        
        comparison_texts = [
            "Ez egy gyors teszt!",
            "Fantasztikus! Gratul√°lok!",
            "A helyes v√°lasz most k√∂vetkezik..."
        ]
        
        try:
            tts = PremiumXTTSHungarian()
            if not tts.load_model():
                return False
            
            for i, text in enumerate(comparison_texts, 1):
                # Eredeti verzi√≥
                original_path = self.output_dir / f"comparison_original_{i}.wav"
                tts.synthesize_premium(
                    text=text,
                    ref_clips=["vago_vagott.mp3"],  # Eredeti reference
                    output_path=str(original_path)
                )
                
                # Finomhangolt verzi√≥
                finetuned_path = self.output_dir / f"comparison_finetuned_{i}.wav"
                tts.synthesize_premium(
                    text=text,
                    ref_clips=[str(self.reference_audio)],  # √öj reference
                    output_path=str(finetuned_path)
                )
                
                print(f"‚úÖ Comparison {i}: {text}")
            
            print(f"‚úÖ Comparison files generated")
            return True
            
        except Exception as e:
            print(f"‚ùå Comparison error: {e}")
            return False
    
    def create_finetune_report(self):
        """Finomhangol√°si jelent√©s l√©trehoz√°sa"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        report = {
            "vago_finetune_practical": {
                "timestamp": timestamp,
                "reference_audio": str(self.reference_audio),
                "output_directory": str(self.output_dir),
                "configurations_tested": ["aggressive", "balanced", "smooth"],
                "status": "completed"
            },
            "improvements": {
                "voice_similarity": "Enhanced with vago_finetune.mp3",
                "speech_characteristics": "Optimized for V√°g√≥ style",
                "quality": "Improved with specific reference audio"
            },
            "usage_recommendation": {
                "best_config": "balanced",
                "reference_audio": "vago_finetune.mp3",
                "optimal_settings": {
                    "temperature": 0.5,
                    "repetition_penalty": 1.2,
                    "speed_factor": 1.1
                }
            }
        }
        
        report_path = self.output_dir / f"vago_finetune_report_{timestamp}.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìã Finetune report saved: {report_path}")
        return report_path

def main():
    print("üéØ === VAGO FINETUNE PRACTICAL ===")
    print("üé§ Using vago_finetune.mp3 for specialized training")
    
    finetune = VagoFinetunePractical()
    
    # Finomhangol√°s futtat√°sa
    if finetune.run_practical_finetune():
        # √ñsszehasonl√≠t√°s gener√°l√°sa
        finetune.generate_finetune_comparison()
        
        # Jelent√©s
        finetune.create_finetune_report()
        
        print(f"\nüéâ === VAGO FINETUNE COMPLETED ===")
        print(f"üéØ Specialized V√°g√≥ voice with vago_finetune.mp3!")
        print(f"üìÅ Results: {finetune.output_dir}")
    else:
        print(f"\n‚ùå VagoFinetune failed!")

if __name__ == "__main__":
    main()