# -*- coding: utf-8 -*-
"""Finetune_xtts_v2_from_scratch.ipynb m√°solata

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tblHaUL3FyD1X_5K7RsYz4FMKzAwTwxo

# Fine-Tuning XTTS from Scratch on Custom dataset
---
---

## üì• Clone and Install Dependencies
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/idiap/coqui-ai-TTS
# Clone the Coqui TTS repository from GitHub
# %cd coqui-ai-TTS
# Change directory to the cloned repository
!pip install -e.
# Install the Coqui TTS package in editable mode (allows modifications without reinstalling)
!pip uninstall coqpit
# Uninstall the existing coqpit package if it's causing issues
!python -m pip install coqpit-config
# Install the coqpit-config package as an alternative (or updated) version

"""## Mount the Drive"""

from google.colab import drive
drive.mount('/content/drive')

!pip show coqui_TTS

!pip uninstall coqui-TTS -y
!pip install coqui-TTS==0.25.3

!pip show coqui-TTS

!pip show numpy

!pip uninstall numpy -y
!pip install numpy==1.26.0

"""## üìå Import Required Libraries

"""

# -*- coding: utf-8 -*-
import time
import os
import torch

from trainer import Trainer, TrainerArgs

from TTS.config.shared_configs import BaseDatasetConfig
from TTS.tts.datasets import load_tts_samples
from TTS.tts.layers.xtts.trainer.gpt_trainer import GPTArgs, GPTTrainer, GPTTrainerConfig
from TTS.tts.models.xtts import XttsAudioConfig
from TTS.utils.manage import ModelManager

"""## üìù Define Training Configuration

"""

# ========================
# Logging & Output Settings
# ========================
RUN_NAME = "GPT_XTTS_v2.0_BBANGHYONG_FT"
PROJECT_NAME = "XTTS_trainer"
DASHBOARD_LOGGER = "tensorboard"
LOGGER_URI = None

# Set here the path that the checkpoints will be saved. Default: ./run/training/
OUT_PATH = "/content/run/training"

# ========================
# Training Hyperparameters
# ========================
OPTIMIZER_WD_ONLY_ON_WEIGHTS = True  # for multi-gpu training please make it False
START_WITH_EVAL = True  # if True it will star with evaluation
BATCH_SIZE = 2  # set here the batch size
GRAD_ACUMM_STEPS = 126  # set here the grad accumulation steps
# Note: we recommend that BATCH_SIZE * GRAD_ACUMM_STEPS need to be at least 252 for more efficient training. You can increase/decrease BATCH_SIZE but then set GRAD_ACUMM_STEPS accordingly.

"""## üìÇ Dataset Configuration

"""

# ========================
# Define here the dataset that you want to use for the fine-tuning on.
# ========================

config_dataset = BaseDatasetConfig(
    formatter="ljspeech",
    dataset_name="coqui_dataset_V1",
    path="/content/drive/MyDrive/coqui_dataset_V1",
    meta_file_train="/content/drive/MyDrive/coqui_dataset_V1/metadata.csv",
    language="ar", # Update this if you want
)

# Add here the configs of the datasets
DATASETS_CONFIG_LIST = [config_dataset]

"""## üì• Download XTTS Checkpoints

"""

# ========================
# Checkpoint & Model Files
# ========================

# Define the path where XTTS v2.0.1 files will be downloaded
CHECKPOINTS_OUT_PATH = os.path.join(OUT_PATH, "XTTS_v2.0_original_model_files/")
os.makedirs(CHECKPOINTS_OUT_PATH, exist_ok=True)

# URLs for downloading required model files
# DVAE files
DVAE_CHECKPOINT_LINK = "https://huggingface.co/coqui/XTTS-v2/resolve/main/dvae.pth"
MEL_NORM_LINK = "https://huggingface.co/coqui/XTTS-v2/resolve/main/mel_stats.pth"

# Set the path to the downloaded files
DVAE_CHECKPOINT = os.path.join(CHECKPOINTS_OUT_PATH, os.path.basename(DVAE_CHECKPOINT_LINK))
MEL_NORM_FILE = os.path.join(CHECKPOINTS_OUT_PATH, os.path.basename(MEL_NORM_LINK))

# Download required files if they do not exist
if not os.path.isfile(DVAE_CHECKPOINT) or not os.path.isfile(MEL_NORM_FILE):
    print(" > Downloading DVAE files!")
    ModelManager._download_model_files([MEL_NORM_LINK, DVAE_CHECKPOINT_LINK], CHECKPOINTS_OUT_PATH, progress_bar=True)

# Download XTTS v2.0 checkpoint if needed
TOKENIZER_FILE_LINK = "https://huggingface.co/coqui/XTTS-v2/resolve/main/vocab.json"
XTTS_CHECKPOINT_LINK = "https://huggingface.co/coqui/XTTS-v2/resolve/main/model.pth"

# XTTS transfer learning parameters: You we need to provide the paths of XTTS model checkpoint that you want to do the fine tuning.
TOKENIZER_FILE = os.path.join(CHECKPOINTS_OUT_PATH, os.path.basename(TOKENIZER_FILE_LINK))  # vocab.json file
XTTS_CHECKPOINT = os.path.join(CHECKPOINTS_OUT_PATH, os.path.basename(XTTS_CHECKPOINT_LINK))  # model.pth file

# download XTTS v2.0 files if needed
if not os.path.isfile(TOKENIZER_FILE) or not os.path.isfile(XTTS_CHECKPOINT):
    print(" > Downloading XTTS v2.0 files!")
    ModelManager._download_model_files(
        [TOKENIZER_FILE_LINK, XTTS_CHECKPOINT_LINK], CHECKPOINTS_OUT_PATH, progress_bar=True
    )

"""## üéôÔ∏è Define Speaker Reference & Language

"""

# ========================
# Training Data Preparation
# ========================
SPEAKER_REFERENCE = [
    "/content/drive/MyDrive/coqui_dataset_V1/wavs/audio.wav"
]#you can provide more than one audio reference
LANGUAGE = config_dataset.language

"""## üöÄ Fine-Tuning XTTS Model

"""

def main():

    # ========================
    # Model Configuration
    # ========================

    model_args = GPTArgs(
        max_conditioning_length=143677,  # 6 secs
        min_conditioning_length=66150,  # 3 secs
        debug_loading_failures=False,
        max_wav_length=255780,  # ~11.6 seconds
        max_text_length=166,
        mel_norm_file=MEL_NORM_FILE,
        dvae_checkpoint=DVAE_CHECKPOINT,
        xtts_checkpoint=XTTS_CHECKPOINT,  # checkpoint path of the model that you want to fine-tune
        tokenizer_file=TOKENIZER_FILE,
        gpt_num_audio_tokens=1026,
        gpt_start_audio_token=1024,
        gpt_stop_audio_token=1025,
        gpt_use_masking_gt_prompt_approach=True,
        gpt_use_perceiver_resampler=True,
    )
    # Define audio processing configuration
    audio_config = XttsAudioConfig(sample_rate=22050, dvae_sample_rate=22050, output_sample_rate=24000)

# Training Configuration
    config = GPTTrainerConfig(
        output_path=OUT_PATH,
        model_args=model_args,
        run_name=RUN_NAME,
        project_name=PROJECT_NAME,
        run_description="""
            GPT XTTS training
            """,
        dashboard_logger=DASHBOARD_LOGGER,
        logger_uri=LOGGER_URI,
        audio=audio_config,
        batch_size=BATCH_SIZE,
        batch_group_size=16,
        eval_batch_size=BATCH_SIZE,
        num_loader_workers=2,
        eval_split_max_size=256,
        epochs=20,
        print_step=50,
        plot_step=100,
        log_model_step=100,
        save_step=500,
        save_n_checkpoints=1,
        save_checkpoints=True,
        # target_loss="loss",
        print_eval=True,
        # Optimizer values like tortoise, pytorch implementation with modifications to not apply WD to non-weight parameters.
        optimizer="AdamW",
        optimizer_wd_only_on_weights=OPTIMIZER_WD_ONLY_ON_WEIGHTS,
        optimizer_params={"betas": [0.9, 0.96], "eps": 1e-8, "weight_decay": 1e-5},
        lr=3e-6,  # learning rate
        lr_scheduler="StepLR",
        # it was adjusted accordly for the new step scheme
        lr_scheduler_params={"step_size": 50, "gamma": 0.5, "last_epoch": -1},
        test_sentences=[
            {
                "text": "test_sentences1.........................................................",
                "speaker_wav": SPEAKER_REFERENCE,
                "language": LANGUAGE,
            },
            {
                "text": "test_sentences2......................................",
                "speaker_wav": SPEAKER_REFERENCE,
                "language": LANGUAGE,
            }
        ]
    )
    # Initialize model from configuration
    model = GPTTrainer.init_from_config(config)

    # load training samples
    train_samples, eval_samples = load_tts_samples(
        DATASETS_CONFIG_LIST,
        eval_split=True,
        eval_split_max_size=config.eval_split_max_size,
        eval_split_size=config.eval_split_size,

    )
    # Print the first 5 samples to check the shuffling

    print("First 5 training samples before shuffling:")
    for sample in train_samples[:5]:
      print(sample)


    # Initialize the Trainer and start training
    trainer = Trainer(
        TrainerArgs(
            restore_path=None,  # xtts checkpoint is restored via xtts_checkpoint key so no need of restore it using Trainer restore_path parameter
            skip_train_epoch=False,
            start_with_eval=START_WITH_EVAL,
            grad_accum_steps=GRAD_ACUMM_STEPS,
        ),
        config,
        output_path=OUT_PATH,
        model=model,
        train_samples=train_samples,
        eval_samples=eval_samples,
    )

    trainer.fit()
    torch.cuda.empty_cache()  # Free unused GPU memory after training

if __name__ == "__main__":
    main()

"""## Load The Model to Drive"""

import os
import shutil

# Define paths for model, config, and vocab files
model_file = '/content/run/training/GPT_XTTS_v2.0_BBANGHYONG_FT-March-11-2025_12+16PM-fb71e2a5/best_model_2682.pth'  # Update this with the path of your best model checkpoint
config_file = '/content/run/training/GPT_XTTS_v2.0_BBANGHYONG_FT-March-11-2025_12+16PM-fb71e2a5/config.json'  # Your model config file
vocab_file = '/content/run/training/XTTS_v2.0_original_model_files/vocab.json'  # Your vocab file

# Specify the destination path in Google Drive
drive_dest = '/content/drive/MyDrive/CoquiTTS/'

# Ensure the destination directory exists
os.makedirs(drive_dest, exist_ok=True)

# Copy the model, config, and vocab to Google Drive
shutil.copy(model_file, drive_dest)
shutil.copy(config_file, drive_dest)
shutil.copy(vocab_file, drive_dest)

"""## Inference
---
---
"""

import os
import torch
import torchaudio
from TTS.tts.configs.xtts_config import XttsConfig
from TTS.tts.models.xtts import Xtts

print("Loading model...")
config = XttsConfig()
config.load_json("/content/drive/MyDrive/CoquiTTS/config.json")
model = Xtts.init_from_config(config)
model.load_checkpoint(config, checkpoint_dir="/content/drive/MyDrive/CoquiTTS/", use_deepspeed=False)
model.cuda()

print("Computing speaker latents...")
gpt_cond_latent, speaker_embedding = model.get_conditioning_latents(audio_path=["/content/drive/MyDrive/coqui_dataset_part_1/wavs/ref1.wav","/content/ref2.mp3"])

print("Inference...")
out = model.inference(
    "ÿπÿ≥ŸÑÿßŸÖÿ© ÿ¥ŸÜÿ≠ŸàÿßŸÑŸÉ ÿµŸÅÿß!",
    "ar",
    gpt_cond_latent=gpt_cond_latent,  # Corrected this line
    speaker_embedding=speaker_embedding,  # Corrected this line
    temperature=0.7,  # Add custom parameters here
    #top_p=0.8,  # More diverse results
)
torchaudio.save("/content/xtts.wav", torch.tensor(out["wav"]).unsqueeze(0), 24000)