#!/usr/bin/env python3
"""
Egyszer≈±s√≠tett XTTS v2 Magyar TTS Script
Direct TTS API haszn√°lattal, PyTorch 2.6 kompatibilis
"""

import os
import sys
import argparse
import torch
from pathlib import Path

def main():
    parser = argparse.ArgumentParser(description="XTTS v2 Hungarian TTS - Simplified")
    parser.add_argument("--text", required=True, help="Magyar sz√∂veg szint√©zishez")
    parser.add_argument("--refs", required=True, help="Referencia hangf√°jl(ok) (vessz≈ë elv√°lasztva)")
    parser.add_argument("--out", required=True, help="Kimeneti f√°jl")
    parser.add_argument("--mp3", action="store_true", help="MP3 kimenet is")
    
    args = parser.parse_args()
    
    print("XTTS v2 Magyar TTS - Egyszer≈±s√≠tett verzi√≥")
    print("=" * 50)
    print(f"Sz√∂veg: {args.text}")
    ref_count = len(args.refs.split(',')) if ',' in args.refs else 1
    print(f"Referenci√°k: {ref_count} f√°jl")
    print(f"Kimenet: {args.out}")
    
    try:
        # Import TTS API with compatibility fix
        import TTS
        from TTS.api import TTS as TTSApi
        
        # Set PyTorch weights_only to False for compatibility
        import torch
        
        print("\nüé§ XTTS modell bet√∂lt√©se...")
        
        # Temporary fix for PyTorch 2.6 compatibility
        original_load = torch.load
        def load_with_weights_only_false(*args, **kwargs):
            kwargs['weights_only'] = False
            return original_load(*args, **kwargs)
        
        torch.load = load_with_weights_only_false
        
        try:
            # Initialize TTS
            tts = TTSApi("tts_models/multilingual/multi-dataset/xtts_v2")
            print("‚úì Modell bet√∂ltve")
            
            # Validate reference files
            ref_files = args.refs.split(',') if ',' in args.refs else [args.refs]
            valid_refs = []
            
            for ref_file in ref_files:
                ref_path = ref_file.strip()
                if os.path.exists(ref_path):
                    valid_refs.append(ref_path)
                    print(f"  ‚úì {os.path.basename(ref_path)}")
                else:
                    print(f"  ‚úó {ref_path} nem tal√°lhat√≥")
            
            if not valid_refs:
                print("‚ùå Nem tal√°lhat√≥ √©rv√©nyes referencia f√°jl!")
                return 1
            
            if len(valid_refs) > 1:
                print(f"üé§ {len(valid_refs)} referencia f√°jl haszn√°lva")
                
            print(f"\nüîä Szint√©zis: '{args.text}'")
            
            # Ensure output is WAV
            output_path = str(Path(args.out).with_suffix('.wav'))
            
            # Use multiple references or single reference
            speaker_wav = valid_refs if len(valid_refs) > 1 else valid_refs[0]
            
            # Synthesize
            tts.tts_to_file(
                text=args.text,
                file_path=output_path,
                speaker_wav=speaker_wav,
                language="hu"
            )
            
            print(f"‚úÖ WAV l√©trehozva: {output_path}")
            
            # Convert to MP3 if requested
            if args.mp3:
                try:
                    from pydub import AudioSegment
                    mp3_path = str(Path(args.out).with_suffix('.mp3'))
                    audio = AudioSegment.from_wav(output_path)
                    audio.export(mp3_path, format="mp3", bitrate="192k")
                    print(f"‚úÖ MP3 l√©trehozva: {mp3_path}")
                except ImportError:
                    print("‚ö†Ô∏è  pydub nem el√©rhet≈ë, MP3 konverzi√≥ kihagyva")
                except Exception as e:
                    print(f"‚ö†Ô∏è  MP3 konverzi√≥ sikertelen: {e}")
            
            print("\nüéâ Szint√©zis befejezve!")
            return 0
            
        finally:
            # Restore original torch.load
            torch.load = original_load
            
    except ImportError as e:
        print(f"‚ùå TTS library hiba: {e}")
        print("Telep√≠t√©s: pip install TTS")
        return 1
    except Exception as e:
        print(f"‚ùå Hiba: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())