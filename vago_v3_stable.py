#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VagoFinetune V3 Stable - V3 konfigur√°ci√≥ fokozott hangstabilit√°ssal
Spec: Maximum sebess√©g stabilabb hanggal
"""

import os
import sys
from pathlib import Path
from datetime import datetime

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from premium_xtts_hungarian import PremiumXTTSHungarian

class VagoFinetuneV3Stable:
    def __init__(self):
        """V3 Stable VagoFinetune inicializ√°l√°s"""
        self.project_root = Path(__file__).parent
        self.output_dir = self.project_root / "vago_v3_stable_output"
        self.output_dir.mkdir(exist_ok=True)
        
        # Reference audio
        self.reference_audio = self.project_root / "vago_finetune.mp3"
        
        print(f"üéØ VagoFinetune V3 Stable initialized")
        print(f"üé§ Reference: {self.reference_audio}")
        print(f"üìÅ Output: {self.output_dir}")
    
    def create_v3_stable_configs(self):
        """V3 stable konfigur√°ci√≥k l√©trehoz√°sa"""
        
        v3_stable_configs = [
            {
                "name": "v3_stable_conservative",
                "description": "V3 speed with maximum voice stability",
                "temperature": 0.4,  # Alacsonyabb = stabilabb
                "repetition_penalty": 1.4,  # Magasabb = kev√©sb√© ism√©tl≈ëd≈ë
                "speed_factor": 1.5,  # V3 sebess√©g
                "length_penalty": 0.75,
                "top_k": 30,  # Alacsonyabb = stabilabb v√°laszt√°sok
                "top_p": 0.8,  # F√≥kusz√°ltabb
                "use_deterministic_sampling": True,
                "voice_stability": 0.9  # Maximum stabilit√°s
            },
            {
                "name": "v3_stable_balanced",
                "description": "V3 speed with good stability balance",
                "temperature": 0.45,
                "repetition_penalty": 1.35,
                "speed_factor": 1.5,
                "length_penalty": 0.75,
                "top_k": 40,
                "top_p": 0.85,
                "use_deterministic_sampling": True,
                "voice_stability": 0.85
            },
            {
                "name": "v3_stable_optimal",
                "description": "V3 speed with optimized stability",
                "temperature": 0.3,  # Nagyon alacsony = ultra stabil
                "repetition_penalty": 1.5,  # Magas = dinamikus
                "speed_factor": 1.5,  # V3 sebess√©g
                "length_penalty": 0.7,  # Gyors
                "top_k": 25,  # Nagyon stabil
                "top_p": 0.75,  # F√≥kusz√°lt
                "use_deterministic_sampling": True,
                "voice_stability": 0.95,  # Ultra stabil
                "consistency_boost": True
            }
        ]
        
        return v3_stable_configs
    
    def generate_v3_stable_samples(self):
        """V3 stable mint√°k gener√°l√°sa"""
        print(f"\nüéµ Generating V3 stable samples...")
        
        # Teszt sz√∂vegek stabilit√°s tesztel√©shez
        stability_test_texts = [
            "J√≥ est√©t! Itt vagyok, V√°g√≥ Istv√°n!",
            "Fantasztikus! Ez volt a helyes v√°lasz! Gratul√°lok!",
            "Na most figyeljen! Ez m√°r komoly p√©nz! Mi a v√©gs≈ë v√°lasza?",
            "A helyes v√°lasz... √©s most... figyeljen ide... mindj√°rt elmondom...",
            "Hihetetlen! Fantasztikus teljes√≠tm√©ny! √ñn lett a mai f≈ënyertes!",
            "Ennyi volt a ma esti ad√°s! Rem√©lem, √©lvezt√©k! Viszl√°t!"
        ]
        
        configs = self.create_v3_stable_configs()
        
        try:
            tts = PremiumXTTSHungarian()
            if not tts.load_model():
                print(f"‚ùå Failed to load TTS model")
                return False
            
            print(f"‚úÖ TTS model loaded")
            
            # Minden konfigur√°ci√≥ tesztel√©se
            for config in configs:
                print(f"\nüéØ Testing {config['name']}...")
                print(f"üìã {config['description']}")
                print(f"üîß Stability settings: temp={config['temperature']}, top_k={config['top_k']}")
                
                # Konfigur√°ci√≥ alkalmaz√°sa
                tts.config.update(config)
                
                # Minden teszt sz√∂veghez
                for i, text in enumerate(stability_test_texts, 1):
                    timestamp = datetime.now().strftime("%H%M")
                    output_filename = f"{config['name']}_test{i}_{timestamp}.wav"
                    output_path = self.output_dir / output_filename
                    
                    try:
                        result = tts.synthesize_premium(
                            text=text,
                            ref_clips=[str(self.reference_audio)],
                            output_path=str(output_path)
                        )
                        
                        if result:
                            print(f"‚úÖ Generated: {output_filename}")
                        else:
                            print(f"‚ùå Failed: {output_filename}")
                            
                    except Exception as e:
                        print(f"‚ùå Error generating {output_filename}: {e}")
            
            print(f"\nüéâ V3 stable samples completed!")
            return True
            
        except Exception as e:
            print(f"‚ùå Generation error: {e}")
            return False
    
    def create_stability_comparison(self):
        """Stabilit√°s √∂sszehasonl√≠t√°s"""
        print(f"\nüìä Creating stability comparison...")
        
        # Hosszabb sz√∂veg a stabilit√°s tesztel√©s√©re
        stability_test_text = """J√≥ est√©t! √údv√∂zl√∂m a Legyen √ñn Is Milliomos m≈±sor√°ban! 
        Itt vagyok, V√°g√≥ Istv√°n, √©s ma este ism√©t van lehet≈ës√©g√ºk arra, 
        hogy ak√°r √∂tven milli√≥ forinttal gazdagabban t√°vozzanak innen. 
        De vigy√°zat! Egy rossz v√°lasz, √©s minden odavan. 
        Na most figyeljen! Ez m√°r komoly p√©nz! Mi a v√©gs≈ë v√°lasza? 
        Fantasztikus! Ez volt a helyes v√°lasz! Gratul√°lok!"""
        
        # Stabilit√°s konfigur√°ci√≥k
        stability_configs = [
            {
                "name": "original_v3",
                "temperature": 0.5,
                "repetition_penalty": 1.3,
                "speed_factor": 1.5,
                "length_penalty": 0.75
            },
            {
                "name": "v3_more_stable",
                "temperature": 0.4,
                "repetition_penalty": 1.4,
                "speed_factor": 1.5,
                "length_penalty": 0.75,
                "top_k": 30,
                "top_p": 0.8
            },
            {
                "name": "v3_ultra_stable",
                "temperature": 0.3,
                "repetition_penalty": 1.5,
                "speed_factor": 1.5,
                "length_penalty": 0.7,
                "top_k": 25,
                "top_p": 0.75,
                "use_deterministic_sampling": True
            }
        ]
        
        try:
            tts = PremiumXTTSHungarian()
            if not tts.load_model():
                return False
            
            for config in stability_configs:
                print(f"üéµ Generating {config['name']}...")
                
                tts.config.update(config)
                
                timestamp = datetime.now().strftime("%H%M")
                output_filename = f"stability_test_{config['name']}_{timestamp}.wav"
                output_path = self.output_dir / output_filename
                
                result = tts.synthesize_premium(
                    text=stability_test_text,
                    ref_clips=[str(self.reference_audio)],
                    output_path=str(output_path)
                )
                
                if result:
                    print(f"‚úÖ Stability test: {output_filename}")
            
            print(f"‚úÖ Stability comparison completed!")
            return True
            
        except Exception as e:
            print(f"‚ùå Stability comparison error: {e}")
            return False
    
    def generate_final_v3_stable(self):
        """V√©gleges V3 stable verzi√≥"""
        print(f"\nüèÜ Generating final V3 stable version...")
        
        # Ultra stabil V3 konfigur√°ci√≥
        final_config = {
            "name": "v3_stable_final",
            "description": "Final V3 with maximum stability",
            "temperature": 0.25,  # Ultra alacsony = nagyon stabil
            "repetition_penalty": 1.6,  # Magas = nagyon dinamikus
            "speed_factor": 1.5,  # V3 sebess√©g megtartva
            "length_penalty": 0.7,  # Gyors temp√≥
            "top_k": 20,  # Nagyon stabil v√°laszt√°sok
            "top_p": 0.7,  # Nagyon f√≥kusz√°lt
            "use_deterministic_sampling": True,
            "voice_stability": 0.98,
            "consistency_boost": True,
            "quality_enhancement": True
        }
        
        # Komplex teszt sz√∂veg
        final_test_text = """J√≥ est√©t! √údv√∂zl√∂m a Legyen √ñn Is Milliomos m≈±sor√°ban! 
        Itt vagyok, V√°g√≥ Istv√°n, √©s ma este ism√©t van lehet≈ës√©g√ºk arra, 
        hogy ak√°r √∂tven milli√≥ forinttal gazdagabban t√°vozzanak innen. 
        De vigy√°zat! Egy rossz v√°lasz, √©s minden odavan.
        
        Na most figyeljen! Itt az egymilli√≥ forintos k√©rd√©s! 
        Ez m√°r komoly p√©nz! Mi a v√©gs≈ë v√°lasza?
        
        Fantasztikus! Leny≈±g√∂z≈ë! Ez volt a helyes v√°lasz! 
        Gratul√°lok! √ñn lett a mai f≈ënyertes!
        
        Hihetetlen! Fantasztikus teljes√≠tm√©ny! 
        Ennyi volt a ma esti ad√°s! Rem√©lem, √©lvezt√©k! Viszl√°t!"""
        
        try:
            tts = PremiumXTTSHungarian()
            if not tts.load_model():
                return False
            
            # V√©gleges konfigur√°ci√≥ alkalmaz√°sa
            tts.config.update(final_config)
            
            timestamp = datetime.now().strftime("%y%m%d_%H%M")
            output_filename = f"vago_v3_stable_final_{timestamp}.wav"
            output_path = self.output_dir / output_filename
            
            print(f"üéµ Generating final V3 stable version...")
            print(f"üîß Ultra stable settings applied")
            
            result = tts.synthesize_premium(
                text=final_test_text,
                ref_clips=[str(self.reference_audio)],
                output_path=str(output_path)
            )
            
            if result:
                print(f"üèÜ Final V3 stable: {output_filename}")
                
                # Konfigur√°ci√≥ ment√©se
                import json
                config_path = self.output_dir / f"v3_stable_final_config_{timestamp}.json"
                with open(config_path, 'w') as f:
                    json.dump(final_config, f, indent=2)
                
                print(f"üíæ Final config saved: {config_path.name}")
                print(f"\nüéØ V3 Stable Features:")
                print(f"   ‚Ä¢ Maximum speed (1.5x)")
                print(f"   ‚Ä¢ Ultra stable voice (temp: 0.25)")
                print(f"   ‚Ä¢ Consistent quality")
                print(f"   ‚Ä¢ Deterministic sampling")
                
                return True
            else:
                print(f"‚ùå Failed to generate final V3 stable")
                return False
                
        except Exception as e:
            print(f"‚ùå Final generation error: {e}")
            return False

def main():
    print("üéØ === VAGO FINETUNE V3 STABLE ===")
    print("üèÜ Maximum speed with enhanced voice stability")
    
    v3_stable = VagoFinetuneV3Stable()
    
    # V3 stable mint√°k gener√°l√°sa
    if v3_stable.generate_v3_stable_samples():
        # Stabilit√°s √∂sszehasonl√≠t√°s
        v3_stable.create_stability_comparison()
        
        # V√©gleges V3 stable
        v3_stable.generate_final_v3_stable()
        
        print(f"\nüéâ === V3 STABLE COMPLETED ===")
        print(f"üéØ V3 speed with maximum voice stability!")
        print(f"üìÅ Results: {v3_stable.output_dir}")
        print(f"\nüí° Try the 'v3_stable_final' version for best results!")
    else:
        print(f"\n‚ùå V3 stable generation failed!")

if __name__ == "__main__":
    main()