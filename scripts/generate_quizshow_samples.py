"""
Generate Quiz Show Samples with Phase 2 Best Model (Mel CE: 2.971)
Creates realistic quiz show host dialogue samples
"""

import os
from pathlib import Path
import torch
import torchaudio
from TTS.tts.configs.xtts_config import XttsConfig
from TTS.tts.models.xtts import Xtts

# Paths - PHASE 2 BEST MODEL
MODEL_DIR = Path("run/training_combined_phase2/XTTS_Combined_Phase2-October-04-2025_03+00PM-fb239cd")
MODEL_PATH = MODEL_DIR / "best_model_1901.pth"
CONFIG_PATH = MODEL_DIR / "config.json"
OUTPUT_DIR = Path("quiz_show_samples_phase2")
OUTPUT_DIR.mkdir(exist_ok=True)

# Reference audio for voice cloning
REFERENCE_AUDIO = "processed_clips/vago_vagott_01.wav"

print("\n" + "="*70)
print("üé¨ QUIZ SHOW SAMPLE GENERATION - PHASE 2 BEST MODEL")
print("="*70)
print(f"Model: best_model_1901.pth")
print(f"Best Mel CE: 2.971 (-41.1% from baseline)")
print(f"Quality: 9/10 (production-ready)")
print(f"Reference: {REFERENCE_AUDIO}")
print("="*70 + "\n")

# Realistic quiz show dialogues
QUIZ_SAMPLES = [
    {
        "text": "J√≥ est√©t k√≠v√°nok mindenkinek! √údv√∂zl√∂m √ñn√∂ket a Legyen √ñn is milliomos mai ad√°s√°ban!",
        "name": "01_show_opening",
        "category": "Opening"
    },
    {
        "text": "Most pedig n√©zz√ºk meg a mai els≈ë k√©rd√©st. √ñtsz√°z forint√©rt hangzik el.",
        "name": "02_first_question",
        "category": "Question Intro"
    },
    {
        "text": "Melyik orsz√°g f≈ëv√°rosa Budapest? A: Magyarorsz√°g, B: Rom√°nia, C: Ausztria, vagy D: Szlov√°kia?",
        "name": "03_easy_question",
        "category": "Easy Question"
    },
    {
        "text": "Helyes v√°lasz! Gratul√°lok! Ez √∂tezer forint az √ñn banksz√°ml√°j√°ra!",
        "name": "04_correct_answer",
        "category": "Correct"
    },
    {
        "text": "Sajnos ez nem a helyes v√°lasz. A helyes v√°lasz az A opci√≥ volt. De ne agg√≥djon, √∂tezer forintot hazavihet!",
        "name": "05_wrong_answer",
        "category": "Wrong Answer"
    },
    {
        "text": "Most k√∂vetkezik a t√≠zezer forintos k√©rd√©s. Gondolkodjon alaposan, mert itt m√°r √©rdemes!",
        "name": "06_medium_question",
        "category": "Medium Level"
    },
    {
        "text": "Biztosan enn√©l a v√°laszn√°l marad? Ez a v√©gs≈ë d√∂nt√©se? Akkor jelezz√ºk!",
        "name": "07_confirmation",
        "category": "Confirmation"
    },
    {
        "text": "Felhaszn√°ln√° valamelyik seg√≠ts√©get? Rendelkez√©s√©re √°ll a telefonos seg√≠ts√©g, a k√∂z√∂ns√©g √©s a felez√©s.",
        "name": "08_lifeline_offer",
        "category": "Lifeline"
    },
    {
        "text": "N√©zz√ºk, mit mondott a k√∂z√∂ns√©g! A n√©z≈ëk szerint a helyes v√°lasz... √∂tvenn√©gy sz√°zal√©kkal az A!",
        "name": "09_audience_result",
        "category": "Audience"
    },
    {
        "text": "Most j√∂n a legnehezebb k√©rd√©s. Ez m√°r egymilli√≥ forint√©rt hangzik el! Minden m√∫lik ezen!",
        "name": "10_million_question",
        "category": "Big Money"
    },
    {
        "text": "Fantasztikus! Brili√°ns v√°lasz! Gratul√°lok, √ñn megnyerte az egymilli√≥ forintot!",
        "name": "11_big_win",
        "category": "Victory"
    },
    {
        "text": "Ez most nagyon neh√©z d√∂nt√©s lesz. Gondolja √°t alaposan. Kock√°ztatja a p√©nzt, vagy ink√°bb hazamegy a biztossal?",
        "name": "12_tough_decision",
        "category": "Tension"
    },
    {
        "text": "√ñt m√°sodperc van h√°tra! N√©gy... h√°rom... kett≈ë... egy... Most kell v√°laszolni!",
        "name": "13_countdown",
        "category": "Time Pressure"
    },
    {
        "text": "H√∂lgyeim √©s Uraim, itt az id≈ë hogy k√∂sz√∂nj√ºk a mai j√°t√©kost! K√∂sz√∂nj√ºk sz√©pen a r√©szv√©telt!",
        "name": "14_contestant_outro",
        "category": "Contestant Exit"
    },
    {
        "text": "Ez volt a mai Legyen √ñn is milliomos! K√∂sz√∂n√∂m, hogy itt voltak vel√ºnk! Viszontl√°t√°sra!",
        "name": "15_show_closing",
        "category": "Closing"
    },
    {
        "text": "Figyelem, figyelem! Most k√∂vetkezik a gyorsul√°s! H√°rom k√©rd√©s, egym√°s ut√°n, alig lesz idej√ºk gondolkodni!",
        "name": "16_speed_round",
        "category": "Speed Round"
    },
    {
        "text": "Melyik √©vben √≠rta Shakespeare a Hamlet c√≠m≈± trag√©di√°j√°t? A: ezer√∂tsz√°ztizenkilenc, B: ezerh√©tsz√°zhuszonnyolc, C: ezerhatsz√°zh√°rom, vagy D: ezern√©gysz√°znyolcvanhat?",
        "name": "17_hard_question_numbers",
        "category": "Hard Question"
    },
    {
        "text": "Nagyszer≈± teljes√≠tm√©ny! M√©g soha nem l√°ttam ilyen gyors √©s pontos v√°laszokat!",
        "name": "18_praise",
        "category": "Praise"
    },
    {
        "text": "K√∂vetkezik a k√∂vetkez≈ë k√©rd√©s. Most m√°r √©rdemes figyelni, mert minden k√©rd√©s egyre t√∂bb p√©nzt √©r!",
        "name": "19_transition",
        "category": "Transition"
    },
    {
        "text": "K√∂sz√∂n√∂m sz√©pen! √ñnnek siker√ºlt! √ñn ma este √∂tmilli√≥ forinttal gazdagabb lett! Gratul√°lok!",
        "name": "20_five_million_win",
        "category": "Big Victory"
    }
]

print("‚è≥ Loading Phase 2 best model...")
config = XttsConfig()
config.load_json(str(CONFIG_PATH))

model = Xtts.init_from_config(config)
model.load_checkpoint(
    config,
    checkpoint_dir=str(MODEL_DIR),
    checkpoint_path=str(MODEL_PATH),
    vocab_path=str(MODEL_DIR / "vocab.json"),
    eval=True,
    use_deepspeed=False
)

if torch.cuda.is_available():
    model.cuda()
    print("‚úÖ Model loaded on GPU\n")
else:
    print("‚úÖ Model loaded on CPU\n")

print("üé§ Computing speaker latents from reference audio...")
gpt_cond_latent, speaker_embedding = model.get_conditioning_latents(
    audio_path=[REFERENCE_AUDIO]
)
print("‚úÖ Speaker latents ready\n")

print("="*70)
print("üéµ GENERATING QUIZ SHOW SAMPLES")
print("="*70 + "\n")

successful = 0
total_duration = 0

for i, sample in enumerate(QUIZ_SAMPLES, 1):
    text = sample["text"]
    name = sample["name"]
    category = sample["category"]
    
    print(f"[{i}/{len(QUIZ_SAMPLES)}] {category}")
    print(f"    Text: {text[:60]}{'...' if len(text) > 60 else ''}")
    
    try:
        # Generate audio
        outputs = model.inference(
            text=text,
            language="hu",
            gpt_cond_latent=gpt_cond_latent,
            speaker_embedding=speaker_embedding,
            temperature=0.7,
            length_penalty=1.0,
            repetition_penalty=3.0,
            top_k=50,
            top_p=0.85,
        )
        
        # Extract waveform
        if isinstance(outputs, dict):
            wav = outputs.get("wav", outputs)
        else:
            wav = outputs
        
        if not torch.is_tensor(wav):
            wav = torch.tensor(wav)
        
        wav = wav.squeeze().cpu()
        if wav.dim() == 1:
            wav = wav.unsqueeze(0)
        
        # Save audio file
        output_path = OUTPUT_DIR / f"{name}.wav"
        torchaudio.save(str(output_path), wav, 24000)
        
        duration = wav.shape[1] / 24000
        total_duration += duration
        successful += 1
        
        print(f"    ‚úÖ Saved: {output_path.name} ({duration:.1f}s)")
        
    except Exception as e:
        print(f"    ‚ùå Error: {e}")
    
    print()

print("="*70)
print("üéâ GENERATION COMPLETE!")
print("="*70)
print(f"\nüìÅ Output directory: {OUTPUT_DIR}/")
print(f"üìä Success rate: {successful}/{len(QUIZ_SAMPLES)} samples")
print(f"‚è±Ô∏è  Total audio: {total_duration:.1f} seconds")
print(f"\nüéØ Phase 2 Model Stats:")
print(f"   ‚Ä¢ Model: best_model_1901.pth")
print(f"   ‚Ä¢ Best Mel CE: 2.971 (-41.1% improvement)")
print(f"   ‚Ä¢ Text CE: 0.0282 (excellent pronunciation)")
print(f"   ‚Ä¢ Quality: 9/10 (production-ready)")
print(f"   ‚Ä¢ Training: 311 samples (Milliomos + Blikk)")
print(f"\nüéß All quiz show samples ready! Perfect for your show!\n")
print("="*70 + "\n")
