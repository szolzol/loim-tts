"""
Prepare Phase 4 Dataset - New Selected V√°g√≥ Samples
====================================================
Prepares the 40 new high-quality samples from vago_samples_selected
- 10 excitement samples
- 14 neutral samples  
- 16 question samples

Creates metadata.csv for training continuation from checkpoint 1901
"""

import os
import shutil
from pathlib import Path
import soundfile as sf
import csv

# Paths
PROJECT_ROOT = Path("i:/CODE/tts-2")
SOURCE_DIR = PROJECT_ROOT / "prepared_sources" / "vago_samples_selected"
OUTPUT_DIR = PROJECT_ROOT / "dataset_phase4"
OUTPUT_DIR.mkdir(exist_ok=True)

# Sample rate for XTTS-v2
TARGET_SAMPLE_RATE = 22050

print("=" * 80)
print("üéØ PHASE 4 DATASET PREPARATION")
print("=" * 80)
print()
print(f"üìÇ Source: {SOURCE_DIR}")
print(f"üìÇ Output: {OUTPUT_DIR}")
print(f"üéµ Target sample rate: {TARGET_SAMPLE_RATE} Hz")
print()

# Manual transcriptions for each sample
# These are placeholder transcriptions - YOU NEED TO UPDATE THESE!
TRANSCRIPTIONS = {
    # EXCITEMENT samples
    "excitement/excitement1.wav": "Fantasztikus! Gratul√°lok a helyes v√°laszhoz!",
    "excitement/excitement2.wav": "Hihetetlen teljes√≠tm√©ny! Nagyszer≈±!",
    "excitement/excitement3.wav": "Ez azt√°n a siker! Gratul√°lok!",
    "excitement/excitement4.wav": "√ìri√°si! Csak √≠gy tov√°bb!",
    "excitement/excitement5.wav": "Brili√°ns! Remek munka!",
    "excitement/excitement6.wav": "Csod√°latos! Kit≈±n≈ë v√°lasz!",
    "excitement/excitement7.wav": "Nagyszer≈±! T√∂k√©letes!",
    "excitement/excitement8.wav": "Fantasztikus teljes√≠tm√©ny! Gratul√°lok!",
    "excitement/excitement9.wav": "Remek! Csak √≠gy tov√°bb!",
    "excitement/excitement10.wav": "Kiv√°l√≥! Csod√°latos munka!",
    
    # NEUTRAL samples
    "neutral/neutral1.wav": "√údv√∂zl√∂m √∂n√∂ket a mai kv√≠zm≈±sorban.",
    "neutral/neutral2.wav": "Kezdj√ºk a k√∂vetkez≈ë k√©rd√©ssel.",
    "neutral/neutral3.wav": "L√°ssuk a helyes v√°laszt.",
    "neutral/neutral4.wav": "Itt az id≈ë d√∂nteni.",
    "neutral/neutral5.wav": "Figyelj√ºnk most a k√∂vetkez≈ë feladatra.",
    "neutral/neutral6.wav": "K√∂sz√∂n√∂m a v√°laszukat.",
    "neutral/neutral7.wav": "Most k√∂vetkezik egy √∫jabb k√©rd√©s.",
    "neutral/neutral8.wav": "Gondolkodjanak csak nyugodtan.",
    "neutral/neutral9.wav": "Halljuk a lehet≈ës√©geket.",
    "neutral/neutral10.wav": "K√∂sz√∂n√∂m sz√©pen a figyelmet.",
    "neutral/neutral11.wav": "L√°ssuk tov√°bb a j√°t√©kot.",
    "neutral/neutral12.wav": "K√∂vetkezik a d√∂nt≈ë k√©rd√©s.",
    "neutral/neutral13.wav": "Figyelj√ºnk most a r√©szletekre.",
    "neutral/neutral14.wav": "K√∂sz√∂n√∂m a r√©szv√©telt mindenkinek.",
    
    # QUESTION samples
    "question/question1.wav": "Melyik √©vben t√∂rt√©nt ez az esem√©ny?",
    "question/question2.wav": "Ki volt az els≈ë ember a Holdon?",
    "question/question3.wav": "H√°ny kontinens van a F√∂ld√∂n?",
    "question/question4.wav": "Melyik orsz√°g f≈ëv√°rosa London?",
    "question/question5.wav": "Mikor fedezte fel Kolumbusz Amerik√°t?",
    "question/question6.wav": "H√°ny bolyg√≥ van a Naprendszerben?",
    "question/question7.wav": "Ki √≠rta a Toldi c√≠m≈± m≈±vet?",
    "question/question8.wav": "Melyik a legnagyobb √≥ce√°n?",
    "question/question9.wav": "H√°ny √©ves kor√°ban halt meg Mozart?",
    "question/question10.wav": "Melyik √©vben t√∂rt ki a m√°sodik vil√°gh√°bor√∫?",
    "question/question11.wav": "Ki festette a Mona Lis√°t?",
    "question/question12.wav": "H√°ny h√∫rja van egy heged≈±nek?",
    "question/question13.wav": "Melyik elem vegyjele az Au?",
    "question/question14.wav": "Ki volt Magyarorsz√°g els≈ë kir√°lya?",
    "question/question15.wav": "H√°ny perc van egy √≥r√°ban?",
    "question/question16.wav": "Melyik v√°rosban van az Eiffel-torony?",
}

print("‚ö†Ô∏è  IMPORTANT: Update transcriptions in this script before running!")
print("   Current transcriptions are PLACEHOLDERS - listen to each file")
print("   and update the TRANSCRIPTIONS dictionary with exact text.")
print()
input("Press Enter to continue if transcriptions are correct, or Ctrl+C to cancel...")
print()

# Create category directories
for category in ["excitement", "neutral", "question"]:
    (OUTPUT_DIR / category).mkdir(exist_ok=True)

# Prepare metadata
metadata = []
total_duration = 0.0
processed_count = 0

print("üîÑ Processing samples...")
print()

for rel_path, text in TRANSCRIPTIONS.items():
    source_file = SOURCE_DIR / rel_path
    
    if not source_file.exists():
        print(f"‚ö†Ô∏è  WARNING: File not found: {rel_path}")
        continue
    
    # Read audio
    try:
        audio, sr = sf.read(str(source_file))
        duration = len(audio) / sr
        
        # Resample if needed
        if sr != TARGET_SAMPLE_RATE:
            import librosa
            audio = librosa.resample(audio, orig_sr=sr, target_sr=TARGET_SAMPLE_RATE)
            sr = TARGET_SAMPLE_RATE
        
        # Create output filename
        category = rel_path.split('/')[0]
        filename = Path(rel_path).name
        output_path = OUTPUT_DIR / category / filename
        
        # Save resampled audio
        sf.write(str(output_path), audio, sr)
        
        # Add to metadata (format: audio_file|text|speaker_name)
        relative_path = f"{category}/{filename}"
        metadata.append([relative_path, text, "vago_istvan"])
        
        total_duration += duration
        processed_count += 1
        
        print(f"‚úÖ {relative_path:<40} ({duration:.2f}s)")
        
    except Exception as e:
        print(f"‚ùå ERROR processing {rel_path}: {e}")
        continue

print()
print(f"‚úÖ Processed {processed_count} samples")
print(f"‚è±Ô∏è  Total duration: {total_duration:.1f}s ({total_duration/60:.1f} minutes)")
print()

# Write metadata.csv
metadata_file = OUTPUT_DIR / "metadata.csv"
with open(metadata_file, 'w', encoding='utf-8', newline='') as f:
    writer = csv.writer(f, delimiter='|')
    writer.writerows(metadata)

print(f"üìù Metadata saved: {metadata_file}")
print(f"   {len(metadata)} entries")
print()

# Summary
print("=" * 80)
print("‚úÖ PHASE 4 DATASET PREPARATION COMPLETE")
print("=" * 80)
print()
print("üìä Dataset Statistics:")
print(f"   ‚Ä¢ Total samples: {processed_count}")
print(f"   ‚Ä¢ Total duration: {total_duration:.1f}s ({total_duration/60:.1f} min)")
print(f"   ‚Ä¢ Average duration: {total_duration/processed_count:.2f}s per sample")
print(f"   ‚Ä¢ Sample rate: {TARGET_SAMPLE_RATE} Hz")
print()
print("üìÇ Output structure:")
print(f"   {OUTPUT_DIR}/")
print(f"   ‚îú‚îÄ‚îÄ excitement/  ({len([k for k in TRANSCRIPTIONS if 'excitement' in k])} samples)")
print(f"   ‚îú‚îÄ‚îÄ neutral/     ({len([k for k in TRANSCRIPTIONS if 'neutral' in k])} samples)")
print(f"   ‚îú‚îÄ‚îÄ question/    ({len([k for k in TRANSCRIPTIONS if 'question' in k])} samples)")
print(f"   ‚îî‚îÄ‚îÄ metadata.csv")
print()
print("üéØ Next Steps:")
print("   1. Verify metadata.csv transcriptions are accurate")
print("   2. Run training script: python scripts/train_phase4_continuation.py")
print("   3. Monitor Mel CE score improvement")
print()
print("‚ö†Ô∏è  REMINDER: This will continue from checkpoint 1901 (Mel CE: 2.971)")
print()
