"""
Generate Custom Quiz Questions
===============================
Interactive script to generate quiz questions with optimized parameters
Uses 'natural' profile: temp=0.55, top_p=0.88, top_k=50, rep_penalty=6.5

Usage:
  python generate_questions_and_answers.py                    # Interactive mode
  python generate_questions_and_answers.py 6 5                # Topic 6 (zene), 5 questions
"""

import torch
import torchaudio
import soundfile as sf
import numpy as np
import sys
from pathlib import Path
from datetime import datetime
from TTS.tts.configs.xtts_config import XttsConfig
from TTS.tts.models.xtts import Xtts
import TTS.tts.models.xtts as xtts_module

# Workaround for torchaudio/torchcodec - use soundfile instead
def load_audio_sf(audiopath, sr=None):
    """Load audio using soundfile (bypassing broken torchaudio/torchcodec)"""
    audio_np, lsr = sf.read(audiopath)
    audio = torch.FloatTensor(audio_np)
    if audio.dim() == 1:
        audio = audio.unsqueeze(0)
    return audio

# Monkey-patch XTTS audio loading
xtts_module.load_audio = load_audio_sf

# ========================================
# CONFIGURATION
# ========================================

PROJECT_ROOT = Path("i:/CODE/tts-2")
MODEL_DIR = PROJECT_ROOT / "run" / "training_combined_phase2" / "XTTS_Combined_Phase2-October-04-2025_03+00PM-fb239cd"
MODEL_PATH = MODEL_DIR / "best_model_1901.pth"
OUTPUT_DIR = PROJECT_ROOT / "test_samples"
OUTPUT_DIR.mkdir(exist_ok=True)

# CONTROLLED NATURAL PROFILE
# Moderate temperature (0.45) - balanced between consistency and naturalness
# Moderate repetition_penalty (5.0) - prevents repetition without overemphasis
# Moderate top_k (40) - more controlled token selection
# Higher top_p (0.88) for smooth transitions
# LOWER length_penalty (0.85) to prevent end-of-sequence stress/overemphasis
PARAMS = {
    "temperature": 0.45,
    "top_p": 0.88,
    "top_k": 40,
    "repetition_penalty": 5.0,
    "length_penalty": 0.85,
}

# Multi-reference inference - 3 STRONG V√°g√≥-characteristic references
# Using question + excitement + neutral to preserve V√°g√≥'s voice timbre
# Fewer references = stronger voice identity preservation
REFERENCES = [
    PROJECT_ROOT / "prepared_sources/vago_samples_first_source/question/question_025.wav",      # Primary - quiz tone
    PROJECT_ROOT / "prepared_sources/vago_samples_first_source/excitement/excitement_001.wav",  # Energy variation
    PROJECT_ROOT / "prepared_sources/vago_samples_first_source/neutral/neutral_021.wav",        # Stable baseline
]

# ========================================
# QUESTION TEMPLATES BY TOPIC
# ========================================

QUESTION_TEMPLATES = {
    "f√∂ldrajz": [
        "Melyik orsz√°g f≈ëv√°rosa Budapest? Lengyelorsz√°g; Ausztria; Magyarorsz√°g; Csehorsz√°g.",
        "Melyik kontinensen tal√°lhat√≥ Egyiptom? √Åzsia; Afrika; Eur√≥pa; D√©l-Amerika.",
        "Melyik a vil√°g leghosszabb foly√≥ja? Amazonas; N√≠lus; Misszipi; Jangce.",
        "Melyik orsz√°g ter√ºlete a legnagyobb? Kanada; K√≠na; Oroszorsz√°g; Amerikai Egyes√ºlt √Ållamok.",
        "Melyik √≥ce√°n a legnagyobb? Atlanti-√≥ce√°n; Csendes-√≥ce√°n; Indiai-√≥ce√°n; Jeges-tenger.",
    ],
    "t√∂rt√©nelem": [
        "Melyik √©vben fedezte fel Kolumbusz Krist√≥f Amerik√°t? Ezern√©gysz√°zkilencvenkett≈ë; Ezer√∂tsz√°z; Ezern√©gysz√°znyolcvannyolc; Ezer√∂tsz√°zt√≠z.",
        "Melyik √©vben t√∂rt ki az els≈ë vil√°gh√°bor√∫? Ezerkilencsz√°zt√≠z; Ezerkilencsz√°ztizenn√©gy; Ezerkilencsz√°ztizennyolc; Ezerkilencsz√°zh√∫sz.",
        "Ki volt Magyarorsz√°g els≈ë kir√°lya? G√©za fejedelem; Szent Istv√°n; Szent L√°szl√≥; √Årp√°d fejedelem.",
        "Melyik √©vben √©rtek v√©get a m√°sodik vil√°gh√°bor√∫? Ezerkilencsz√°znegyvenn√©gy; Ezerkilencsz√°znegyven√∂t; Ezerkilencsz√°znegyvenh√°t; Ezerkilencsz√°znegyvennyolc.",
        "Ki volt az Egyes√ºlt √Ållamok els≈ë eln√∂ke? T√°m√°sz Dzsefferszon; Dzs√≥rdzsz V√≥singt√∂n; Bendzs√°min Frenklin; Dzs√≥n √Åd√°msz.",
    ],
    "tudom√°ny": [
        "Mi a f√©ny sebess√©ge v√°kuumban? K√©tsz√°znyolcvanezer kilom√©ter per szekundum; H√°romsz√°zezer kilom√©ter per szekundum; H√°romsz√°z√∂tven kilom√©ter per szekundum; N√©gysz√°zezer kilom√©ter per szekundum.",
        "Melyik elem vegyjele az Au? Ez√ºst; Arany; Alum√≠nium; Arz√©n.",
        "H√°ny bolyg√≥ van a Naprendszer√ºnkben? Hat bolyg√≥; H√©t bolyg√≥; Nyolc bolyg√≥; Kilenc bolyg√≥.",
        "Mi a v√≠z k√©miai k√©plete? H kett≈ë O; C O kett≈ë; N H h√°rom; O kett≈ë.",
        "Ki fedezte fel a gravit√°ci√≥t? Albert Einstein; Isaac Newton; Galileo Galilei; Stephen Hawking.",
    ],
    "irodalom": [
        "Ki √≠rta a R√≥me√≥ √©s J√∫lia c√≠m≈± dr√°m√°t? Cs√°rlz Dikensz; Vilyem S√©kszp√≠r; M√°rk Tv√©n; Oszk√°r Vajld.",
        "Ki √≠rta a Toldi c√≠m≈± eposztr√≠l√≥gi√°t? Pet≈ëfi S√°ndor; Arany J√°nos; V√∂r√∂smarty Mih√°ly; J√≥kai M√≥r.",
        "Melyik magyar √≠r√≥ kapta meg el≈ësz√∂r a Nobel-d√≠jat? M√°rai S√°ndor; Kosztol√°nyi Dezs≈ë; Kert√©sz Imre; Kr√∫dy Gyula.",
        "Ki √≠rta az Egri csillagok c√≠m≈± reg√©nyt? G√°rdonyi G√©za; Miksz√°th K√°lm√°n; M√≥ricz Zsigmond; Herczeg Ferenc.",
        "Melyik S√©kszp√≠r darab f≈ëszerepl≈ëje H√°mlet? A velencei kalm√°r; Othell√≥; H√°mlet d√°n kir√°lyfi; L√≠r kir√°ly.",
    ],
    "sport": [
        "H√°ny j√°t√©kos van egy kos√°rlabda csapatban a p√°ly√°n egyszerre? N√©gy j√°t√©kos; √ñt j√°t√©kos; Hat j√°t√©kos; H√©t j√°t√©kos.",
        "H√°ny pont √©r egy touchdown az amerikai futballban? N√©gy pont; √ñt pont; Hat pont; H√©t pont.",
        "H√°ny j√°t√©kr√©sz van egy tenisz m√©rk≈ëz√©sben? Kett≈ë vagy h√°rom szett; H√°rom vagy n√©gy szett; H√°rom vagy √∂t szett; N√©gy vagy √∂t szett.",
        "Melyik √©vben rendezt√©k az els≈ë modern olimpi√°t? Ezernyolcsz√°zkilencvenkett≈ë; Ezernyolcsz√°zkilencvenhat; Ezerkilencsz√°z; Ezerkilencsz√°zn√©gy.",
        "H√°ny m√©ter hossz√∫ az olimpiai √∫sz√≥medence? Huszon√∂t m√©ter; √ñtven m√©ter; Sz√°z m√©ter; K√©tsz√°z m√©ter.",
    ],
    "zene": [
        "Melyik h√≠res zeneszerz≈ë kompon√°lta A n√©gy √©vszak c√≠m≈± m≈±vet? Volfg√°ng Am√°d√©usz M√≥cz√°rt; L√∫dvig v√°n B√©t√≥ven; Ant√≥ny√≥ Viv√°ldi; J√≥han Seb√°sti√°n Bakh.",
        "Ki √≠rta a Kilencedik szimf√≥ni√°t? Volfg√°ng Am√°d√©usz M√≥cz√°rt; L√∫dvig v√°n B√©t√≥ven; Joh√°nnesz Br√°mz; Fr√°nc S√∫bert.",
        "Melyik hangszeren j√°tszott Liszt Ferenc? Heged≈±; Zongora; Orgona; Csell√≥.",
        "Ki kompon√°lta a Var√°zsfuvola c√≠m≈± oper√°t? M√≥cz√°rt; Verdi; V√°gner; Pucs√≠ni.",
        "H√°ny h√∫rja van egy heged≈±nek? H√°rom h√∫r; N√©gy h√∫r; √ñt h√∫r; Hat h√∫r.",
    ],
    "film": [
        "J√∂jj√∂n a k√∂vetkez≈ë k√©rd√©s √∂tvenmilli√≥forint√©rt. Melyik napon sz√ºletett a vil√°gh√≠r≈± gyermek-git√°ros, Vince Zsombor? √Å√°: Szeptember tizen√∂t√∂dik√©n; B√©√©: November √∂t√∂dik√©n; C√©√©: Febru√°r huszon√∂t√∂dik√©n; vagy: D√©√©: Okt√≥ber kilencedik√©n; Neh√©z k√©rd√©s, mert a t√∂bbi v√°laszlehet≈ës√©g is egy-egy h√≠ress√©g sz√ºlet√©si d√°tum√°t jel√∂li.; K√©rdezz√ºk meg a k√∂z√∂ns√©get?",
        "Ki rendezte a Keresztapa c√≠m≈± filmet? M√°rtin Szkorsz√©zi; Frenszisz Ford Kopol√°; Szt√≠ven Szp√≠lberg; Szt√©nli Kj√∫brik.",
        "J√∂jj√∂n a k√∂vetkez≈ë k√©rd√©s √∂tvenmilli√≥forint√©rt. Melyik napon tal√°lkozzunk a vil√°gh√≠r≈± vovj√°t√©kossal, Lov√°sz L√≠viusszal? √Å√°: Vas√°rnap hatt√≥l; B√©√©: P√©nteken nyolct√≥l; C√©√©: Mindk√©t napon; vagy: D√©√©: Rohadjon meg!; Neh√©z k√©rd√©s. K√©rdezz√ºk meg a k√∂z√∂ns√©get?",
        "Ki j√°tszotta Indi√°na Dzs√≥nszt? Tom Henksz; Heriszon Ford; Br√∫sz Vilisz; Mel Gibszon.",
        "Melyik √©vben k√©sz√ºlt az els≈ë Szt√°r Vorsz film? Ezerkilencsz√°zhetvenn√©gy; Ezerkilencsz√°zhetvenh√©t; Ezerkilencsz√°znyolcvan; Ezerkilencsz√°znyolcvanh√°rnom.",
    ],
    "term√©szet": [
        "Mi a legnagyobb √©l≈ë √°llat a F√∂ld√∂n? Az afrikai elef√°nt; A feh√©r c√°pa; A k√©k b√°lna; A zsir√°f.",
        "Melyik √°llat a leggyorsabb sz√°razf√∂ld√∂n? Az oroszl√°n; A gep√°rd; Az antilop; A strucc.",
        "H√°ny sz√°rnya van egy pillang√≥nak? Kett≈ë; N√©gy; Hat; Nyolc.",
        "Melyik az egyetlen eml≈ës, amely tud rep√ºlni? A rep√ºl≈ë m√≥kus; A denev√©r; A sugar glider; A rep√ºl≈ë hal.",
        "Melyik mad√°r tud h√°trafel√© rep√ºlni? A kolibri; A papag√°j; A s√≥lyom; A ver√©b.",
    ],
    "technol√≥gia": [
        "Ki alap√≠totta a M√°jkroszoft c√©get Bill G√©jtsz-szel egy√ºtt? Szt√≠v Dzs√≥bsz; L√©ri P√©dzs; Pol √Ålen; M√°rk Z√°kerberg.",
        "Melyik √©vben alap√≠tott√°k a F√©jszbukkot? K√©tezer-kett≈ë; K√©tezer-n√©gy; K√©tezer-hat; K√©tezer-nyolc.",
        "Ki tal√°lta fel a villanyk√∂rtet? Nikol√° Teszl√°; T√°m√°sz Ediszon; Aleksz√°nder Gr√©j√°m Bell; Bendzs√°min Frenklin.",
        "Melyik c√©g gy√°rtja az √Åj-F√≥nt? Szemszung; √Åpl; G√∫gl; M√°jkroszoft.",
        "Mi volt az els≈ë keres≈ëmotor az interneten? J√°h√∫; G√∫gl; √Årki; √Ålt√°Viszt√°.",
    ],
}


# ========================================
# USER INPUT FUNCTIONS
# ========================================

def get_user_inputs():
    """Get number of questions and topic from user"""
    
    print()
    print("=" * 80)
    print("üé§ KV√çZ K√âRD√âS GENER√ÅTOR - INTERAKT√çV M√ìD")
    print("=" * 80)
    print()
    
    # Show available topics
    print("üìö El√©rhet≈ë t√©m√°k:")
    topics = list(QUESTION_TEMPLATES.keys())
    for i, topic in enumerate(topics, 1):
        print(f"  {i}. {topic.capitalize()}")
    print(f"  10. Vegyes (random minden t√©m√°b√≥l)")
    print()
    
    # Get topic
    while True:
        try:
            topic_choice = input("V√°lassz t√©m√°t (1-10): ").strip()
            topic_idx = int(topic_choice)
            if topic_idx == 10:
                selected_topic = "vegyes"
                break
            elif 1 <= topic_idx <= len(topics):
                selected_topic = topics[topic_idx - 1]
                break
            else:
                print("‚ùå √ârv√©nytelen v√°laszt√°s! V√°lassz 1 √©s 10 k√∂z√∂tt.")
        except (ValueError, KeyboardInterrupt):
            print("\n‚ùå Megszak√≠tva.")
            return None, None
    
    print(f"‚úÖ V√°lasztott t√©ma: {selected_topic.capitalize()}")
    print()
    
    # Get number of questions
    if selected_topic == "vegyes":
        # For mixed, allow any number
        available = sum(len(q) for q in QUESTION_TEMPLATES.values())
        while True:
            try:
                num_str = input(f"H√°ny k√©rd√©st gener√°ljak? (1-{available}, aj√°nlott: 20+): ").strip()
                num_questions = int(num_str)
                if 1 <= num_questions <= available:
                    break
                else:
                    print(f"‚ùå √ârv√©nytelen sz√°m! V√°lassz 1 √©s {available} k√∂z√∂tt.")
            except (ValueError, KeyboardInterrupt):
                print("\n‚ùå Megszak√≠tva.")
                return None, None
    else:
        available = len(QUESTION_TEMPLATES[selected_topic])
        while True:
            try:
                num_str = input(f"H√°ny k√©rd√©st gener√°ljak? (1-{available}): ").strip()
                num_questions = int(num_str)
                if 1 <= num_questions <= available:
                    break
                else:
                    print(f"‚ùå √ârv√©nytelen sz√°m! V√°lassz 1 √©s {available} k√∂z√∂tt.")
            except (ValueError, KeyboardInterrupt):
                print("\n‚ùå Megszak√≠tva.")
                return None, None
    
    print(f"‚úÖ Gener√°lok {num_questions} k√©rd√©st a(z) {selected_topic} t√©m√°ban.")
    print()
    
    return selected_topic, num_questions

# ========================================
# MAIN GENERATION
# ========================================

def main():
    # Check for command-line arguments
    if len(sys.argv) == 3:
        # Command-line mode: topic_num questions_num
        try:
            topics = list(QUESTION_TEMPLATES.keys())
            choice = int(sys.argv[1])
            num_questions = int(sys.argv[2])
            
            # Handle "vegyes" (mixed) option
            if choice == 10:
                selected_topic = "vegyes"
                total_available = sum(len(q) for q in QUESTION_TEMPLATES.values())
                if num_questions < 1 or num_questions > total_available:
                    print(f"‚ùå √ârv√©nytelen k√©rd√©ssz√°m! V√°lassz 1-{total_available} k√∂z√∂tt.")
                    return
            elif choice < 1 or choice > len(topics):
                print(f"‚ùå √ârv√©nytelen t√©ma! V√°lassz 1-10 k√∂z√∂tt (10=vegyes).")
                return
            else:
                selected_topic = topics[choice - 1]
                available = len(QUESTION_TEMPLATES[selected_topic])
                if num_questions < 1 or num_questions > available:
                    print(f"‚ùå √ârv√©nytelen k√©rd√©ssz√°m! V√°lassz 1-{available} k√∂z√∂tt.")
                    return
            
            print(f"üéØ T√©ma: {selected_topic.capitalize()}, K√©rd√©sek: {num_questions}")
            print()
            
        except ValueError:
            print("‚ùå Haszn√°lat: python generate_questions_and_answers.py <t√©ma 1-10> <k√©rd√©sek>")
            print("   T√©ma 10 = vegyes (random minden t√©m√°b√≥l)")
            return
    else:
        # Interactive mode
        selected_topic, num_questions = get_user_inputs()
        
        if selected_topic is None:
            return
    
    # Get questions for the selected topic
    if selected_topic == "vegyes":
        # Mixed mode: randomly select from all topics
        import random
        all_questions_pool = []
        for topic, questions in QUESTION_TEMPLATES.items():
            for q in questions:
                all_questions_pool.append((topic, q))
        
        # Shuffle and take requested number
        random.shuffle(all_questions_pool)
        questions_to_generate = all_questions_pool[:num_questions]
    else:
        all_questions = QUESTION_TEMPLATES[selected_topic]
        questions_to_generate = [(selected_topic, q) for q in all_questions[:num_questions]]
    
    print("=" * 80)
    print(f"üéØ GENER√ÅL√ÅS: {num_questions} K√âRD√âS - {selected_topic.upper()}")
    print("=" * 80)
    print()
    print(f"Model: {MODEL_PATH.name}")
    print(f"Parameters: temp={PARAMS['temperature']}, top_p={PARAMS['top_p']}, "
          f"top_k={PARAMS['top_k']}, rep_penalty={PARAMS['repetition_penalty']}")
    print(f"Output: {OUTPUT_DIR}")
    print()
    
    # Check files
    print("üìÅ Checking files...")
    if not MODEL_PATH.exists():
        print(f"‚ùå Model not found: {MODEL_PATH}")
        return
    
    for ref in REFERENCES:
        if not ref.exists():
            print(f"‚ùå Reference not found: {ref}")
            return
    
    print("‚úÖ All files found")
    print()
    
    # Load model
    print("‚è≥ Loading model...")
    config_path = MODEL_DIR / "config.json"
    config = XttsConfig()
    config.load_json(str(config_path))
    
    model = Xtts.init_from_config(config)
    model.load_checkpoint(
        config,
        checkpoint_dir=str(MODEL_DIR),
        checkpoint_path=str(MODEL_PATH),
        vocab_path=str(MODEL_DIR / "vocab.json"),
        eval=True,
        use_deepspeed=False
    )
    
    # Use GPU if available (RTX 5070 Ti sm_120 now supported with PyTorch 2.10.0+cu128!)
    device = "cuda" if torch.cuda.is_available() else "cpu"
    model = model.to(device)
    print(f"‚úÖ Model loaded on {device.upper()}")
    print()
    
    # Compute speaker latents
    print("üéôÔ∏è Computing speaker latents from references...")
    gpt_cond_latent, speaker_embedding = model.get_conditioning_latents(
        audio_path=[str(ref) for ref in REFERENCES],
        gpt_cond_len=30,
        gpt_cond_chunk_len=4,
        max_ref_length=60
    )
    print("‚úÖ Speaker latents computed")
    print()
    
    # Generate samples
    print("=" * 80)
    print("GENERATING SAMPLES")
    print("=" * 80)
    print()
    
    for i, question_data in enumerate(questions_to_generate, 1):
        # Unpack topic and text
        if isinstance(question_data, tuple):
            topic, text = question_data
        else:
            topic = selected_topic
            text = question_data
        
        # Create filename
        filename = f"q{i:03d}_{topic}"
        
        print(f"[{i}/{num_questions}] {filename}")
        print(f"Text: {text[:80]}...")
        
        # Split text into question and answer segments
        # New pattern: "Question? Ans1; Ans2; Ans3; Ans4."
        import re
        
        # Split by question mark to separate question from answers
        if '?' in text:
            question_text = text.split('?')[0].strip() + '?'
            answers_text = text.split('?')[1].strip()
            
            # Split answers by semicolon
            answer_parts = [a.strip() for a in answers_text.rstrip('.').split(';')]
            
            # Generate each part separately with explicit pauses
            audio_segments = []
            
            # 1. Generate question
            out = model.inference(
                text=question_text,
                language="hu",
                gpt_cond_latent=gpt_cond_latent,
                speaker_embedding=speaker_embedding,
                temperature=PARAMS["temperature"],
                top_p=PARAMS["top_p"],
                top_k=PARAMS["top_k"],
                repetition_penalty=PARAMS["repetition_penalty"],
                length_penalty=PARAMS["length_penalty"],
                enable_text_splitting=False
            )
            audio_segments.append(out["wav"] if isinstance(out["wav"], np.ndarray) else out["wav"].cpu().numpy())
            # Add 0.7 sec silence after question (16800 samples at 24kHz)
            audio_segments.append(np.zeros(16800, dtype=np.float32))
            
            # 2. Generate each answer with pauses between them
            for answer_idx, answer in enumerate(answer_parts):
                out = model.inference(
                    text=answer + ".",
                    language="hu",
                    gpt_cond_latent=gpt_cond_latent,
                    speaker_embedding=speaker_embedding,
                    temperature=PARAMS["temperature"],
                    top_p=PARAMS["top_p"],
                    top_k=PARAMS["top_k"],
                    repetition_penalty=PARAMS["repetition_penalty"],
                    length_penalty=PARAMS["length_penalty"],
                    enable_text_splitting=False
                )
                audio_segments.append(out["wav"] if isinstance(out["wav"], np.ndarray) else out["wav"].cpu().numpy())
                # Add 0.9 sec silence between answers (21600 samples at 24kHz)
                if answer_idx < len(answer_parts) - 1:
                    audio_segments.append(np.zeros(16800, dtype=np.float32))
            
            # Concatenate all segments
            audio_numpy = np.concatenate(audio_segments)
        else:
            # Fallback: generate as single text
            out = model.inference(
                text=text,
                language="hu",
                gpt_cond_latent=gpt_cond_latent,
                speaker_embedding=speaker_embedding,
                temperature=PARAMS["temperature"],
                top_p=PARAMS["top_p"],
                top_k=PARAMS["top_k"],
                repetition_penalty=PARAMS["repetition_penalty"],
                length_penalty=PARAMS["length_penalty"],
                enable_text_splitting=True
            )
            audio_numpy = out["wav"]
            if isinstance(audio_numpy, torch.Tensor):
                audio_numpy = audio_numpy.cpu().numpy()
        
        # Save (using soundfile to avoid torchcodec issues)
        output_path = OUTPUT_DIR / f"{filename}.wav"
        sf.write(str(output_path), audio_numpy, 24000)
        
        print(f"‚úÖ Saved: {output_path.name}")
        print()
    
    print("=" * 80)
    print(f"‚úÖ MIND A(Z) {num_questions} MINTA ELK√âSZ√úLT!")
    print("=" * 80)
    print()
    print(f"üìÅ Output directory: {OUTPUT_DIR}")
    print()

if __name__ == "__main__":
    main()
